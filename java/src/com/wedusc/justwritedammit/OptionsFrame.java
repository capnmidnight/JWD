/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wedusc.justwritedammit;

import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Sean McBeth
 */
public class OptionsFrame extends javax.swing.JFrame {

    /**
     * Creates new form OptionsFrame
     */
    public OptionsFrame() {
        initComponents();
        String[] families = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        fontComboBox.setModel(new javax.swing.DefaultComboBoxModel(families));
        fontSizeSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                setupEditorFont();
            }
        });
        jTabbedPane1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                setupEditorFont();
            }
        });

        String keyList = 
                  "Control+?:       show this screen." + Program.NL
                + "Control+S:       save current document." + Program.NL
                + "Control+Shift+S: save document with file prompt." + Program.NL
                + "Control+O:       open document." + Program.NL
                + "Control+N:       make new document." + Program.NL
                + "Control+[:       backward in document list." + Program.NL
                + "Control+]:       foreward in document list." + Program.NL
                + "↑, ↓, ←, →:     move cursor." + Program.NL
                + "Shift+<Arrows>:  select text while moving cursor." + Program.NL
                + "Control+C:       copies selection." + Program.NL
                + "Control+X:       cuts selection." + Program.NL
                + "Control+V:       pastes copied/cut text at cursor." + Program.NL
                + "Control+W:       closes a document." + Program.NL
                + "Alt+F4:          close the program.";
        if (Program.IS_OSX) {
            keyList = keyList.replace("Control+", "Command+");
            keyList = keyList.replace("Alt+F4", "Command+Q");
        } 
        keyShortcutDisplay.setText(keyList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fontComboBox = new javax.swing.JComboBox();
        fontSizeSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        fontTest = new javax.swing.JTextArea();
        foreColorChooser = new javax.swing.JColorChooser();
        backColorChooser = new javax.swing.JColorChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        keyShortcutDisplay = new javax.swing.JTextArea();

        setTitle("Options for \"Just Write, Dammit!\"");
        setAlwaysOnTop(true);

        jLabel1.setText("Font:");

        fontComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Size:");

        fontTest.setColumns(20);
        fontTest.setLineWrap(true);
        fontTest.setRows(5);
        fontTest.setText("\"Just Write, Dammit!\" is the bee's knees!");
        jScrollPane1.setViewportView(fontTest);

        jTabbedPane1.addTab("Preview Text", jScrollPane1);
        jTabbedPane1.addTab("Foreground Color", foreColorChooser);
        jTabbedPane1.addTab("Background Color", backColorChooser);

        keyShortcutDisplay.setEditable(false);
        keyShortcutDisplay.setBackground(new java.awt.Color(240, 240, 240));
        keyShortcutDisplay.setColumns(20);
        keyShortcutDisplay.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        keyShortcutDisplay.setLineWrap(true);
        keyShortcutDisplay.setRows(5);
        jScrollPane2.setViewportView(keyShortcutDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fontSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(fontSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fontComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontComboBoxActionPerformed
        setupEditorFont();
    }//GEN-LAST:event_fontComboBoxActionPerformed

    private void setupEditorFont() {
        fontTest.setFont(new Font((String) fontComboBox.getSelectedItem(), Font.PLAIN, (Integer) fontSizeSpinner.getValue()));
        fontTest.setForeground(foreColorChooser.getColor());
        fontTest.setBackground(backColorChooser.getColor());
    }

    public Font getSelectedFont() {
        return fontTest.getFont();
    }

    public void setSelectedFont(Font font) {
        fontComboBox.setSelectedItem(font.getName());
        fontTest.setFont(font);
        fontSizeSpinner.setValue(font.getSize());
    }

    public Color getSelectedForeground() {
        return fontTest.getForeground();
    }

    public void setSelectedForeground(Color fore) {
        fontTest.setForeground(fore);
        foreColorChooser.setColor(fore);
    }

    public Color getSelectedBackground() {
        return fontTest.getBackground();
    }

    public void setSelectedBackground(Color back) {
        fontTest.setBackground(back);
        backColorChooser.setColor(back);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser backColorChooser;
    private javax.swing.JComboBox fontComboBox;
    private javax.swing.JSpinner fontSizeSpinner;
    private javax.swing.JTextArea fontTest;
    private javax.swing.JColorChooser foreColorChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea keyShortcutDisplay;
    // End of variables declaration//GEN-END:variables
}
